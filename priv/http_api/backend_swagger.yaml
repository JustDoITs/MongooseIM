# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.0"
  title: MongooseIM control backend REST API
  description: This REST API provides similar control functionaly to the `mongooseimctl` command. The response objects are modeled on the `ejabberd_commands` entries and print-outs from `mongooseimctl` though the final API will need to be consistent with the MongooseIM's **command registry**.
schemes:
  - http
basePath: /api
produces:
  - application/json
paths:
  /commands:
    get:
      description: List the available commands for administering MongooseIM.
      responses:
        200:
          description: A list of information for all the currently available commands
          schema:
            title: commandList
            type: array
            items:
              title: commandDescription
              type: object
              properties:
                name:
                  type: string
                category:
                  type: string
                action:
                  type: string
                desc:
                  type: string
  /users/{XMPPHost}:
    parameters:
      - name: XMPPHost
        in: path
        description: The XMPP hostname under which users will be registered. I.e. the later part of their JID
        required: true
        type: string
        format: hostname
    get:
      description: Retrieve a list of users registered under the given XMPP hostname.
      responses:
        200:
          description: A list of users registered under the given XMPP hostname.
          schema:
            title: userList
            type: array
            items:
              title: JID
              type: string
              format: JID
    post:
      parameters:
        - name: Credentials
          in: body
          description: Credentials with which to register the user
          required: true
          schema:
            title: Credentials
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      description: Register a user under the given domain.
      responses:
        201:
          description: A user with the given username and password has been registered
          schema:
            title: successMessage
            type: string
  /users/{XMPPHost}/{username}:
    parameters:
      - name: XMPPHost
        in: path
        description: The XMPP hostname under which the user is registered. I.e. the later part of their JID
        required: true
        type: string
        format: hostname
      - name: username
        in: path
        description: The username part of the user's JID
        required: true
        type: string
    put:
      parameters:
        - name: password
          in: body
          description: The new password for the user
          required: true
          schema:
            title: newpass
            type: string
      description: Change the user's password.
      responses:
        200:
          description: Password has been changed
    delete:
      description: Cancel a user's registration under the given domain.
      responses:
        200:
          description: The user's registration has been successfully canceled
          schema:
            title: successMessage
            type: string
  /sessions/{XMPPHost}:
    parameters:
      - name: XMPPHost
        in: path
        description: The XMPP hostname.
        required: true
        type: string
        format: hostname
    get:
      description: Retrieve a list of sessions.
      responses:
        200:
          description: A list of sessions.
          schema:
            title: userList
            type: array
            items:
              title: JID
              type: string
              format: JID
  /sessions/{XMPPHost}/{username}/{resource}:
    parameters:
      - name: XMPPHost
        in: path
        description: The XMPP hostname.
        required: true
        type: string
        format: hostname
      - name: username
        in: path
        description: The leading part of a user's JID.
        required: true
        type: string
      - name: resource
        in: path
        description: A resource name for the given user.
        required: true
        type: string
    delete:
      description: Terminate this session (connection).
      responses:
        200:
          description: Session (connection) terminated.
          schema:
            title: userList
            type: string
  /:
    get:
      description: List the resources on this MongooseIM node.
      responses:
        200:
          description: A list of the resources under this MongooseIM **node**
          schema:
            title: MIMNodeResources
            type: array
            items:
              title: nodeResource
              type: string
  /messages:
    get:
      description: Retrieve a list of users registered under the given XMPP hostname.
      responses:
        200:
          description: A list of users registered under the given XMPP hostname.
          schema:
            title: userList
            type: array
            items:
              title: JID
              type: string
              format: JID
    post:
      parameters:
        - name: chatStanza
          in: body
          description: The chat stanza (with a sender and recipient)
          required: true
          schema:
            title: chatStanza
            type: object
            properties:
              caller:
                description: the sender of the message
                type: string
                format: JID
              to:
                description: the recipient of the message
                type: string
                format: JID
              msg:
                description: the message text
                type: string
      description: Send a chat message from one user to another.
      responses:
        200:
          description: Message was sent
  /messages/{caller}/{other}/{limit}:
    get:
      parameters:
        - name: caller
          in: path
          description: The user archive in question
          required: true
          type: string
        - name: other
          in: path
          description: The other party
          required: true
          type: string
        - name: limit
          in: path
          description: An upper bound on the number of messages to fetch from the archive
          required: true
          type: integer
      description: Retrieve recent message from archive.
      responses:
        200:
          description: The messages archived for the given user and the other party
          schema:
            title: records
            type: array
            items:
              title: record
              type: object
              properties:
                sender:
                  type: string
                  format: JID
                timestamp:
                  type: integer
                message_id:
                  type: string
                body:
                  type: string
  /status:
    get:
      description: The status of MongooseIM on the given host.
      responses:
        200:
          description: Success response with the status of the MongooseIM node
          schema:
            title: MIMStatus
            type: object
            properties:
              hostname:
                type: string
              osPID:
                type: integer
              version:
                type: string
              uptime:
                type: string
              logLocation:
                type: string
                format: directory
  /{XMPPHost}:
    get:
      description: List the resources under this XMPP **host**.
      parameters:
        - name: XMPPHost
          in: path
          description: The XMPP hostname
          required: true
          type: string
          format: hostname
      responses:
        200:
          description: Successful response listing the resources on the given XMPP host
          schema:
            title: XMPPHostResources
            type: array
            items:
                title: XMPPHostResource
                type: string
        404:
          description: Failure response because the given XMPP host does not exist
  /{XMPPHost}/rosters/{username}:
    parameters:
      -
        name: XMPPHost
        in: path
        description: The XMPP hostname
        required: true
        type: string
      -
        name: username
        in: path
        description: The username part of a JID
        required: true
        type: string
    get:
      description: Roster information for the given user under the given XMPP host.
      responses:
        200:
          description: Success response with the roster for a given user
          schema:
            title: Roster
            type: array
            items:
              title: Contact
              type: object
              properties:
                jid:
                  type: string
                nick:
                  type: string
                subscription:
                  type: string
                  format: binary
                ask:
                  type: string
                  format: bianry
                group:
                  type: array
                  items:
                    title: Group
                    type: string
                    format: binary
        404:
          description: Failure response because the given user does not exist under this XMPP host or the XMPP host itself does not exist
    post:
      description: Add an item to the given user's roster.
      consumes:
        - application/json
      parameters:
        -
          name: Item
          in: body
          description: The item to be placed into the user's roster (XMPP hostname passed through the path)
          required: true
          schema:
            title: Item
            type: object
            properties:
              username:
                type: string
              XMPPHostname:
                type: string
              nick:
                type: string
              groups:
                type: array
                items:
                  title: Group
                  type: object
                  properties:
                    name:
                      type: string
              subs:
                type: array
                items:
                  title: Group
                  type: object
                  properties:
                    name:
                      type: string
      responses: 
        200:
          description: The item was successfully posted for the give user
        404:
          description: Failure response because the given user does not exist under this XMPP host or the XMPP host itself does not exist
    delete:
      description: Remove an item from a user's roster.
      parameters:
        -
          name: ItemID
          in: body
          description: The item to be placed into the user's roster (XMPP hostname passed through the path)
          required: true
          schema:
            title: Item
            type: object
            properties:
              username:
                type: string
              XMPPHostname:
                type: string
      responses:
        200:
          description: The item was successfully removed 
        404:
          description: Failure response because the given user does not exist under this XMPP host or the XMPP host itself does not exist
  /{XMPPHost}/users:
    parameters:
        -
          name: XMPPHost
          in: path
          description: The XMPP hostname
          required: true
          type: string
    get:
      description: Get information about all registered users. This response is **paged** because there may be many users.
      responses:
        200:
          description: Success response listing all registered users
          schema:
            title: Register
            type: array
            items:
              title: Username
              type: string
        404:
          description: Failure response because the given XMPP host does not exist
    post:
      description: Register a user.
      consumes:
        - application/json
      parameters:
        -
          name: Credentials
          in: body
          description: Credentials for the user to be registered (XMPP hostname passed through the path)
          required: true
          schema:
            title: Credentials
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        201:
          description: Register an entity with the given credentials. This creates a new resource under `/{XMPPHost}/rosters/{username}`
        404:
          description: Failure response because the given XMPP host does not exist
        409:
          description: This username is already registered with another entity under this XMPP host
    delete:
      description: Cancel a user's registration
      parameters:
        -
          name: Username
          in: body
          description: The username part of a JID (XMPP hostname passed through the path)
          required: true
          schema:
            title: username
            type: string
      responses:
        200:
          description: Cancelation successful
        404:
          description: Could not find the given user under the XMPP host
  /{XMPPHost}/sessions:
    get:
      parameters:
        -
          name: XMPPHost
          in: path
          description: The XMPP hostname
          required: true
          type: string
      description: Retrieve **paginated** session information for the given XMPP host.
      responses:
        200:
          description: Retrieve session information for the given XMPP host.
          schema:
            title: Sessions
            type: array
            items:
              title: Session
              type: object
              properties:
                sid:
                  type: string
                jid:
                  type: string
                connection:
                  type: string
                ipAddr:
                  type: string
                port:
                  type: integer
                priority:
                  type: integer
                node:
                  type: string
                uptime:
                  type: string
        404:
          description: Failure response because the given XMPP host does not exist
  /{XMPPHost}/sessions/{username}:
    parameters:
      -
        name: XMPPHost
        in: path
        description: The XMPP hostname
        required: true
        type: string
      -
        name: username
        in: path
        description: The username part of a JID
        required: true
        type: string
    delete:
      description: Kick a user session
      parameters:
        -
          name: resource
          in: body
          description: The user's resource with the corresponding session to  kick
          required: true
          schema:
            title: resource
            type: string
      responses:
        200:
          description: User kicked
        404:
          description: Failure response because the given user does not exist under this XMPP host or the XMPP host itself does not exist
    get:
      description: The session information for the given user.
      responses:
        200:
          description: Retrieve the session information for the given user
          schema:
            title: Sessions
            type: array
            items:
              title: Session
              type: object
              properties:
                sid:
                  type: string
                jid:
                  type: string
                connection:
                  type: string
                ipAddr:
                  type: string
                port:
                  type: integer
                priority:
                  type: integer
                node:
                  type: string
                uptime:
                  type: string
        404:
          description: Failure response because the given user does not exist under this XMPP host or the XMPP host itself does not exist
  /cluster:
    get:
      description: Retrieve a list of clustered MongooseIM nodes.
      responses:
        200:
          description: Success response with a list of clustered MongooseIM nodes
          schema:
            title: Cluster
            type: array
            items:
              title: Node
              type: string
    post:
      parameters:
        -
          name: Node
          in: body
          description: The name of a node to cluster with
          required: true
          schema:
            title: None
            type: string
      description: Ask this node to join a cluster.
      responses:
        200:
          description: Successfully joined the given cluster
        409:
          description: The client's request conflicts with the server's current state, because in the current state of the world, MongooseIM can not contact the specified node
    delete:
      description: Ask this node to leave a cluster. This request is only valid when sending the name of the current node to a clustered MongooseIM node.
      parameters:
        -
          name: Node
          in: body
          description: The name of **this** node
          required: true
          schema:
            title: Node
            type: string
      responses:
        200:
          description: Successfully left the cluster.
          schema:
            description: "NOTE: this should be an empty array as this node will not be clustered with any other nodes."
            title: Cluster
            type: array
            items:
              title: Node
              type: string
        400:
          description: MongooseIM does not know how to service this request because one or both of the assumptions given above (in the request's description section) is violated
  /message:
    post:
      description: Send a chat message.
      parameters:
        -
          name: Stanza
          in: body
          description: The XMPP message.
          required: true
          schema:
            title: Stanza
            type: object
            properties:
              from:
                description: A JID
                type: string
              to:
                description: A JID
                type: string
              stanza:
                type: string
      responses:
        200:
          description: Stanza is sent.
        400:
          description: "Either or both of the sender or recipient do not exists. The JIDs or the stanza are badly formatted"
  /user/caller/{JID}:
    put:
      description: Change password for the user corresponding to `JID`.
      parameters:
        -
          name: JID
          in: path
          description: The JID identifying the user
          required: true
          type: string
        -
          name: Password
          in: body
          description: The new password to set.
          required: true
          schema:
            title: Password
            type: object
            properties:
              newpass:
                type: string
      responses:
        200:
          description: Password is changed
  /muc-lights/{XMPPHost}/{roomName}:
    parameters:
      -
        name: XMPPHost
        in: path
        description: The XMPP hostname
        required: true
        type: string
      -
        name: roomName
        in: path
        description: The MUC Light room's **name** (i.e. **not** the room's JID)
        required: true
        type: string
    put:
      description: Invite one user on behalf of another.
      consumes:
        - application/json
      parameters:
        -
          name: invite
          in: body
          description: The invite itself
          required: true
          schema:
            title: invite
            type: object
            properties:
              sender:
                type: string
                description: The inviter's JID
              recipient:
                type: string
                description: The invitee's JID
      responses: 
        200:
          description: An invite was sent out
